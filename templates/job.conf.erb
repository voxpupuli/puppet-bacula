Job {
    Name             = <%= @name %>
    Type             = <%= @jobtype %>
    Client           = <%= @clientcert %>-fd
    FileSet          = <%= @fileset_real %>
<% if @pool -%>
    Pool             = <%= @pool %>
<% end -%>
<% if @storage -%>
    Storage          = <%= @storage %>
<% end -%>
<% if @jobtype == "Restore" -%>
    Where            = <%= @restoredir %>
<%   if !@messages -%>
    Messages         = Standard
<%   end -%>
<% elsif @jobtype == "Backup" -%>
<% if @pool_full -%>
    Full Backup Pool         = <%= scope.lookupvar('bacula::storage') %>-Pool-Full
<% end -%>
<% if @pool_inc -%>
    Incremental Backup Pool  = <%= scope.lookupvar('bacula::storage') %>-Pool-Inc
<% end -%>
<% if @pool_diff -%>
    Differential Backup Pool = <%= scope.lookupvar('bacula::storage') %>-Pool-Diff
<% end -%>
<% elsif @jobtype == "Copy" or @jobtype == "Migrate" -%>
<% if @selection_type -%>
    Selection Type = <%= @selection_type %>
<% end -%>
<% if @selection_pattern -%>
    Selection Type = <%= @selection_pattern %>
<% end -%>
<% end -%>

<% if @jobdef -%>
    JobDefs          = "<%= @jobdef %>"
<% end -%>
<% @runscript.each do |script| -%>
    RunScript {
      RunsWhen = <%= script.fetch('runs_when') %>
      FailJobOnError = <%= (script['fail_job_on_error'] != false) ? 'yes' : 'no' %>
      RunsOnSuccess = <%= (script['runs_on_success'] != false) ? 'yes' : 'no' %>
      RunsOnFailure = <%= script['runs_on_failure'] ? 'yes' : 'no' %>
      RunsOnClient = <%= script['runs_on_client'] ? 'yes' : 'no' %>
      Command = <%= script.fetch('command').inspect %>
    }
<% end -%>
    Accurate         = <%= @accurate %>
<% if @level -%>
    Level            = <%= @level %>
<% end -%>
<% if @messages -%>
    Messages         = <%= @messages %>
<% end -%>
<% if @sched -%>
    Schedule         = <%= @sched %>
<% end -%>
<% if @priority -%>
    Priority         = <%= @priority %>
<% end -%>
<%= scope.function_template(['bacula/_job_reschedule.erb']) -%>
}

